---
version: '3.9'
services:
  geovisio-auth:
    container_name: geovisio-auth
    image: quay.io/keycloak/keycloak:20.0.1
    restart: unless-stopped
    ports:
      - ${KC_HTTP_PORT_HOST}:${KC_HTTP_PORT_CONTAINER}
    command: start-dev --import-realm
    volumes:
      - ./config/keycloak/data:/opt/keycloak/data
    environment:
      GEOVISIO_BASE_URL: ${GEOVISIO_BASE_URL}
      GEOVISIO_CLIENT_SECRET: ${GEOVISIO_CLIENT_AND_OAUTH_CLIENT_SECRET}
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KEYCLOAK_FRONTEND_URL: http://localhost:5000/api/auth/login
      KC_HTTP_PORT: ${KC_HTTP_PORT_CONTAINER}
    healthcheck:
      test: curl --fail http://localhost:8182/realms/geovisio
      timeout: 5s
      interval: 5s
      retries: 5
      start_period: 60s
    networks:
      - geovisio

  geovisio-api:
    container_name: geovisio-api
    image: geovisio/api:latest
    restart: unless-stopped
    ports:
      - 5000:5000
    command: 
      - api
      # - ssl-api  
      # - dev-api
      # - db-upgrade
      # - cleanup
    volumes:
      - ./panoramax/images:/data/360app
    depends_on:
      - geovisio-auth
      - geovisio-db
    environment:
      OAUTH_CLIENT_ID: geovisio
      OAUTH_CLIENT_SECRET: ${GEOVISIO_CLIENT_AND_OAUTH_CLIENT_SECRET}
      DB_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@geovisio-db/${POSTGRES_DB}
      OAUTH_OIDC_URL: http://localhost:8182/realms/geovisio
      OAUTH_PROVIDER: oidc
      FLASK_SECRET_KEY: ${FLASK_SECRET_KEY}
      API_FORCE_AUTH_ON_UPLOAD: True
      API_BLUR_URL: http://localhost:5500
      PICTURE_PROCESS_THREADS_LIMIT: 0
      PICTURE_PROCESS_DERIVATES_STRATEGY: PREPROCESS
      FS_URL: /data/360app
      TZ: Europe/Paris
    extra_hosts:
      - "localhost:host-gateway"
    networks:
      - geovisio
    
  geovisio-cli:
    container_name: geovisio-cli
    build:
      context: ./config/cli
      dockerfile: Dockerfile
    restart: unless-stopped
    tty: true
    volumes:
      - ./rushes:/app/images
    networks:
      - geovisio

  geovisio-website:
    container_name: geovisio-website
    image: geovisio/website:latest
    restart: unless-stopped
    ports:
      - 3000:3000    
    environment:
      VITE_INSTANCE_NAME: ${VITE_INSTANCE_NAME}
      VITE_API_URL: ${VITE_API_URL}
    networks:
      - geovisio

  geovisio-blurring:
    container_name: geovisio-blurring
    image: geovisio/blurring:develop
    restart: unless-stopped
    ports:
      - "5500:80"
    command: api
    volumes:
      - ./config/blurring/models:/opt/blur/models
    environment:
      STRATEGY: FAST
    # healthcheck:
    #   test: curl --fail http://localhost:5500
    #   interval: 5s
    #   timeout: 5s
    #   retries: 5
    #   start_period: 60s
    networks:
      - geovisio

  # Background workers used to process pictures in the background
  # calling the blur API and generating derivates (SD picture and tiles for faster rendering in photosphereviewer)
  # Several background workers can run together
  background-worker:
    # container_name: background-worker
    image: geovisio/api:latest
    restart: always
    command: picture-worker
    depends_on:
      - geovisio-db
    volumes:
      - ./panoramax/images:/data/360app
    deploy:
      mode: replicated
      replicas: 5 # by default this number of workers will be run. This can be change at runtime with `docker compose up background-worker -d --scale background-worker=<VALUE>`
    environment:
      DB_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@geovisio-db/${POSTGRES_DB}
      API_BLUR_URL: http://localhost:5500
      PICTURE_PROCESS_DERIVATES_STRATEGY: PREPROCESS
      FS_URL: /data/360app
    extra_hosts:
      - "localhost:host-gateway"
    networks:
      - geovisio

  geovisio-db:
    container_name: geovisio-db
    image: postgis/postgis:13-3.2
    restart: unless-stopped
    ports:
      - ${POSTGRES_PORT_HOST}:5432
    volumes:
      - ./config/db:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
    healthcheck:
      # double check to detect the fact that PG starts twice on startup
      test: pg_isready -q -d ${POSTGRES_DB} -U ${POSTGRES_USER} && sleep 1 && pg_isready -q -d ${POSTGRES_DB} -U ${POSTGRES_USER}
      timeout: 5s
      interval: 5s
      retries: 5
      start_period: 60s
    networks:
      - geovisio

networks:
  geovisio:
    name: geovisio
    driver: bridge
    ipam:
      config:
        - subnet: "172.21.0.0/16"
          gateway: "172.21.0.1"

# complete docker compose with geovisio backend, a database, a blurring API and a keycloak for authentication
# they use the local network in order for the oauth dance to work (keycloak should be accessible by the `backend` service and the user's browser)
# * the keycloak is accessible through http://localhost:8182
# * the backend is accessible through http://localhost:5000
# * the blurring API is accessible through http://localhost:5500
# * the website is accessible through http://localhost:3000
# (the database is not on the local network since only the backend need to access it)
# if the port are alreay binded on your system, change them in this file
